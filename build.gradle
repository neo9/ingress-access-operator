plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.springframework.experimental.aot' version '0.11.4' apply false
	id "org.sonarqube" version "3.5.0.2730"
	id 'pl.allegro.tech.build.axion-release' version '1.13.6'
	id 'io.spring.javaformat'
}

group = 'io.neo9'
version = scmVersion.version
sourceCompatibility = '11'

tasks.whenTaskAdded { task ->
	if (task.name.startsWith("checkFormatAotMain")) {
		task.enabled = false
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven { url 'https://repo.spring.io/release' }
	mavenCentral()
}

ext {
	javaOperatorVersion = '2.1.4'
	javaOperatorStarterVersion = '2.3.0'
	bouncycastleVersion = '1.70'

	buildNativeImage = ! "false".equalsIgnoreCase(System.getenv('NATIVE_IMAGE'))
}

if (buildNativeImage) {
	println "[plugins] Applying AOT plugin"
	apply plugin: "org.springframework.experimental.aot"
} else {
	println "[plugins] NOT applying AOT plugin"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-logging'

	implementation "io.javaoperatorsdk:operator-framework-spring-boot-starter:${javaOperatorStarterVersion}"
	implementation "org.bouncycastle:bcprov-ext-jdk15on:${bouncycastleVersion}"
	implementation "org.bouncycastle:bcpkix-jdk15on:${bouncycastleVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor "io.javaoperatorsdk:operator-framework:${javaOperatorVersion}"
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation "io.javaoperatorsdk:operator-framework-spring-boot-starter-test:${javaOperatorStarterVersion}"
}

test {
	useJUnitPlatform()
}

bootBuildImage {
	imageName   = "neo9sas/${project.name}:latest"
	if (! buildNativeImage) {
		builder     = 'paketobuildpacks/builder:base'
	} else {
		builder		= 'paketobuildpacks/builder:tiny'
		environment = [
				'BP_NATIVE_IMAGE'                : 'true',
				'BP_NATIVE_IMAGE_BUILD_ARGUMENTS': '-H:+AddAllCharsets --enable-https'
		]
	}
}

subprojects {
    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
        }
    }
}
